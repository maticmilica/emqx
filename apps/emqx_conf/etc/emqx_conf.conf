## NOTE:
## Configs in this file might be overridden by:
## 1. Environment variables which start with 'EMQX_' prefix
## 2. File $EMQX_NODE__DATA_DIR/configs/cluster-override.conf
## 3. File $EMQX_NODE__DATA_DIR/configs/local-override.conf
##
## The *-override.conf files are overwritten at runtime when changes
## are made from EMQX dashboard UI, management HTTP API, or CLI.
## All configuration details can be found in emqx.conf.example

node {
  name = "emqx1@192.168.100.64"
  cookie = emqxsecretcookie
  data_dir = "{{ platform_data_dir }}"
  etc_dir = "{{ platform_etc_dir }}"
}

log {
  ##----------------------------------------------------------------
  ## The console log handler send log messages to emqx console
  ##----------------------------------------------------------------
  console_handler {
    ## Log to single line
    ## @doc log.console_handler.<name>.enable
    ## ValueType: Boolean
    ## Default: false
    enable = true

    ## The log level of this handler
    ## All the log messages with levels lower than this level will
    ## be dropped.
    ##
    ## @doc log.console_handler.<name>.level
    ## ValueType: debug | info | notice | warning | error | critical | alert | emergency
    ## Default: warning
    level = debug

    ## Timezone offset to display in logs
    ##
    ## @doc log.console_handler.<name>.time_offset
    ## ValueType: system | utc | String
    ##  - "system" use system zone
    ##  - "utc" for Universal Coordinated Time (UTC)
    ##  - "+hh:mm" or "-hh:mm" for a specified offset
    ## Default: system
    time_offset = system

    ## Limits the total number of characters printed for each log event.
    ##
    ## @doc log.console_handler.<name>.chars_limit
    ## ValueType: unlimited | Integer
    ## Range: [0, +Inf)
    ## Default: unlimited
    chars_limit = unlimited

    ## Maximum depth for Erlang term log formatting
    ## and Erlang process message queue inspection.
    ##
    ## @doc log.console_handler.<name>.max_depth
    ## ValueType: unlimited | Integer
    ## Default: 100
    max_depth = 100

    ## Log formatter
    ## @doc log.console_handler.<name>.formatter
    ## ValueType: text | json
    ## Default: text
    formatter = text

    ## Log to single line
    ## @doc log.console_handler.<name>.single_line
    ## ValueType: Boolean
    ## Default: true
    single_line = true

    ## The max allowed queue length before switching to sync mode.
    ##
    ## Log overload protection parameter. If the message queue grows
    ## larger than this value the handler switches from anync to sync mode.
    ##
    ## @doc log.console_handler.<name>.sync_mode_qlen
    ## ValueType: Integer
    ## Range: [0, ${log.console_handler.<name>.drop_mode_qlen}]
    ## Default: 100
    sync_mode_qlen = 100

    ## The max allowed queue length before switching to drop mode.
    ##
    ## Log overload protection parameter. When the message queue grows
    ## larger than this threshold, the handler switches to a mode in which
    ## it drops all new events that senders want to log.
    ##
    ## @doc log.console_handler.<name>.drop_mode_qlen
    ## ValueType: Integer
    ## Range: [${log.console_handler.<name>.sync_mode_qlen}, ${log.console_handler.<name>.flush_qlen}]
    ## Default: 3000
    drop_mode_qlen = 3000

    ## The max allowed queue length before switching to flush mode.
    ##
    ## Log overload protection parameter. If the length of the message queue
    ## grows larger than this threshold, a flush (delete) operation takes place.
    ## To flush events, the handler discards the messages in the message queue
    ## by receiving them in a loop without logging.
    ##
    ## @doc log.console_handler.<name>.flush_qlen
    ## ValueType: Integer
    ## Range: [${log.console_handler.<name>.drop_mode_qlen}, infinity)
    ## Default: 8000
    flush_qlen = 8000

    ## Kill the log handler when it gets overloaded.
    ##
    ## Log overload protection parameter. It is possible that a handler,
    ## even if it can successfully manage peaks of high load without crashing,
    ## can build up a large message queue, or use a large amount of memory.
    ## We could kill the log handler in these cases and restart it after a
    ## few seconds.
    ##
    ## @doc log.console_handler.<name>.overload_kill.enable
    ## ValueType: Boolean
    ## Default: true
    overload_kill.enable = true

    ## The max allowed queue length before killing the log hanlder.
    ##
    ## Log overload protection parameter. This is the maximum allowed queue
    ## length. If the message queue grows larger than this, the handler
    ## process is terminated.
    ##
    ## @doc log.console_handler.<name>.overload_kill.qlen
    ## ValueType: Integer
    ## Range: [0, 1048576]
    ## Default: 20000
    overload_kill.qlen = 20000

    ## The max allowed memory size before killing the log hanlder.
    ##
    ## Log overload protection parameter. This is the maximum memory size
    ## that the handler process is allowed to use. If the handler grows
    ## larger than this, the process is terminated.
    ##
    ## @doc log.console_handler.<name>.overload_kill.mem_size
    ## ValueType: Size
    ## Default: 30MB
    overload_kill.mem_size = 30MB

    ## Restart the log hanlder after some seconds.
    ##
    ## Log overload protection parameter. If the handler is terminated,
    ## it restarts automatically after a delay specified in seconds.
    ##
    ## @doc log.console_handler.<name>.overload_kill.restart_after
    ## ValueType: Duration
    ## Default: 5s
    overload_kill.restart_after = 5s

    ## Controlling Bursts of Log Requests.
    ##
    ## Log overload protection parameter. Large bursts of log events - many
    ## events received by the handler under a short period of time - can
    ## potentially cause problems. By specifying the maximum number of events
    ## to be handled within a certain time frame, the handler can avoid
    ## choking the log with massive amounts of printouts.
    ##
    ## Note that there would be no warning if any messages were
    ## dropped because of burst control.
    ##
    ## @doc log.console_handler.<name>.burst_limit.enable
    ## ValueType: Boolean
    ## Default: false
    burst_limit.enable = false

    ## This config controls the maximum number of events to handle within
    ## a time frame. After the limit is reached, successive events are
    ## dropped until the end of the time frame defined by `window_time`.
    ##
    ## @doc log.console_handler.<name>.burst_limit.max_count
    ## ValueType: Integer
    ## Default: 10000
    burst_limit.max_count = 10000

    ## See the previous description of burst_limit_max_count.
    ##
    ## @doc log.console_handler.<name>.burst_limit.window_time
    ## ValueType: duration
    ## Default: 1s
    burst_limit.window_time = 1s
  }
  file_handlers.default {
    level = warning
    file = "{{ platform_log_dir }}/emqx.log"
  }
}

cluster {
  name = emqxcl
  discovery_strategy = manual
}
